# 2-1 데이터 로드 및 전처리
import tensorflow as tf
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_valid, y_valid) = mnist.load_data()
print(x_train.shape, y_train.shape)
print(x_valid.shape, y_valid.shape)

# 샘플 이미지 출력
import matplotlib.pylab as plt
def plot_image(data, idx):
  plt.figure(figsize = (5,5))
  plt.imshow(data[idx],cmap = 'gray')
  plt.axis('off')
  plt.show()

plot_image(x_train, 0)

# 정규화(Normalization)
print(x_train.min(), x_train.max())
print(x_valid.min(), x_valid.max())

x_train = x_train / 255.0
x_valid = x_valid / 255.0

print(x_train.min(), x_train.max())
print(x_valid.min(), x_valid.max())

# 채널 추가
print(x_train.shape, x_valid.shape)
x_train_in = x_train[..., tf.newaxis]
x_valid_in = x_valid[..., tf.newaxis]

print(x_train_in.shape, x_valid_in.shape)

# Sequential API를 사용해 sample model 생성
model = tf.keras.Sequential([
                             tf.keras.layers.Conv2D(32,(3,3), activation = 'relu',
                                                    input_shape = (28,28,1), name = 'conv'),
                             tf.keras.layers.MaxPooling2D((2,2), name = 'pool'),
                             tf.keras.layers.Flatten(),
                             tf.keras.layers.Dense(10, activation = 'softmax'),
])

# 모델 컴파일 및 모델 훈련
model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

history = model.fit(x_train_in, y_train,
                    validation_data = (x_valid_in, y_valid),
                    epochs = 10)
                    
model.evaluate(x_valid_in, y_valid)

def plot_loss_acc(history, epoch):
  loss, val_loss = history.history['loss'], history.history['val_loss']
  acc, val_acc = history.history['accuracy'], history.history['val_accuracy']

  fig, axes = plt.subplots(1, 2, figsize = (12,4))

  axes[0].plot(range(1, epoch + 1), loss, label = 'Training')
  axes[0].plot(range(1, epoch + 1), val_loss, label = 'Validation')
  axes[0].legend(loc = 'best')
  axes[0].set_title('Loss')

  axes[1].plot(range(1, epoch + 1), acc, label = 'Training')
  axes[1].plot(range(1, epoch + 1), val_acc, label = 'Validation')
  axes[1].legend(loc = 'best')
  axes[1].set_title('Accuracy')

  plt.show()

plot_loss_acc(history, 10)

model.summary()
model.input
model.output
model.layers

# 첫번째 레이어 가중치
model.layers[0].weights

# 첫번째 레이어 커널 가중치
model.layers[0].kernel

# 첫번째 레이어 bias 가중치
model.layers[0].bias,

# 레이어 이름 사용하여 레이어 선택
model.get_layer('conv')
